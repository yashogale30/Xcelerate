https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/submissions/

/*
    do binary search for target and in fiest while loop narrow it down to left half after the index for target is found, similarly in second while loop, narrow down the search to right half after index is found for target
*/


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) 
    {
        
        vector<int>sol = {-1,-1};
        int l = 0;
        int r = nums.size()-1;
        while(l<=r)
        {
            int mid = l+(r-l)/2;
            if(nums[mid] == target)
            {
                sol[0] = mid;
                r = mid-1;
            }
            else if(nums[mid]>target)
                r = mid-1;
            else
                l = mid+1;
        }
        l = 0;
        r = nums.size()-1;
        while(l<=r)
        {
            int mid = l+(r-l)/2;
            if(nums[mid] == target)
            {
                sol[1] = mid;
                l = mid+1;
            }
            else if(nums[mid]>target)
                r = mid-1;
            else
                l = mid+1;
        }
        return sol;
    }
};
